# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server import util


class TapiTopologyTopologyRef(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topology_uuid=None):  # noqa: E501
        """TapiTopologyTopologyRef - a model defined in OpenAPI

        :param topology_uuid: The topology_uuid of this TapiTopologyTopologyRef.  # noqa: E501
        :type topology_uuid: str
        """
        self.openapi_types = {
            'topology_uuid': str
        }

        self.attribute_map = {
            'topology_uuid': 'topology-uuid'
        }

        self._topology_uuid = topology_uuid

    @classmethod
    def from_dict(cls, dikt) -> 'TapiTopologyTopologyRef':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.topology.TopologyRef of this TapiTopologyTopologyRef.  # noqa: E501
        :rtype: TapiTopologyTopologyRef
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topology_uuid(self):
        """Gets the topology_uuid of this TapiTopologyTopologyRef.

        none  # noqa: E501

        :return: The topology_uuid of this TapiTopologyTopologyRef.
        :rtype: str
        """
        return self._topology_uuid

    @topology_uuid.setter
    def topology_uuid(self, topology_uuid):
        """Sets the topology_uuid of this TapiTopologyTopologyRef.

        none  # noqa: E501

        :param topology_uuid: The topology_uuid of this TapiTopologyTopologyRef.
        :type topology_uuid: str
        """

        self._topology_uuid = topology_uuid
