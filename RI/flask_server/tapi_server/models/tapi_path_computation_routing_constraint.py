# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_common_forwarding_direction import TapiCommonForwardingDirection  # noqa: F401,E501
from tapi_server.models.tapi_path_computation_diversity_policy import TapiPathComputationDiversityPolicy  # noqa: F401,E501
from tapi_server.models.tapi_path_computation_route_objective_function import TapiPathComputationRouteObjectiveFunction  # noqa: F401,E501
from tapi_server.models.tapi_topology_cost_characteristic import TapiTopologyCostCharacteristic  # noqa: F401,E501
from tapi_server.models.tapi_topology_latency_characteristic import TapiTopologyLatencyCharacteristic  # noqa: F401,E501
from tapi_server.models.tapi_topology_risk_characteristic import TapiTopologyRiskCharacteristic  # noqa: F401,E501
from tapi_server import util


class TapiPathComputationRoutingConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_exclusive=True, diversity_policy=None, route_objective_function=None, cost_characteristic=None, latency_characteristic=None, risk_diversity_characteristic=None, route_direction=None):  # noqa: E501
        """TapiPathComputationRoutingConstraint - a model defined in OpenAPI

        :param is_exclusive: The is_exclusive of this TapiPathComputationRoutingConstraint.  # noqa: E501
        :type is_exclusive: bool
        :param diversity_policy: The diversity_policy of this TapiPathComputationRoutingConstraint.  # noqa: E501
        :type diversity_policy: TapiPathComputationDiversityPolicy
        :param route_objective_function: The route_objective_function of this TapiPathComputationRoutingConstraint.  # noqa: E501
        :type route_objective_function: TapiPathComputationRouteObjectiveFunction
        :param cost_characteristic: The cost_characteristic of this TapiPathComputationRoutingConstraint.  # noqa: E501
        :type cost_characteristic: List[TapiTopologyCostCharacteristic]
        :param latency_characteristic: The latency_characteristic of this TapiPathComputationRoutingConstraint.  # noqa: E501
        :type latency_characteristic: List[TapiTopologyLatencyCharacteristic]
        :param risk_diversity_characteristic: The risk_diversity_characteristic of this TapiPathComputationRoutingConstraint.  # noqa: E501
        :type risk_diversity_characteristic: List[TapiTopologyRiskCharacteristic]
        :param route_direction: The route_direction of this TapiPathComputationRoutingConstraint.  # noqa: E501
        :type route_direction: TapiCommonForwardingDirection
        """
        self.openapi_types = {
            'is_exclusive': bool,
            'diversity_policy': TapiPathComputationDiversityPolicy,
            'route_objective_function': TapiPathComputationRouteObjectiveFunction,
            'cost_characteristic': List[TapiTopologyCostCharacteristic],
            'latency_characteristic': List[TapiTopologyLatencyCharacteristic],
            'risk_diversity_characteristic': List[TapiTopologyRiskCharacteristic],
            'route_direction': TapiCommonForwardingDirection
        }

        self.attribute_map = {
            'is_exclusive': 'is-exclusive',
            'diversity_policy': 'diversity-policy',
            'route_objective_function': 'route-objective-function',
            'cost_characteristic': 'cost-characteristic',
            'latency_characteristic': 'latency-characteristic',
            'risk_diversity_characteristic': 'risk-diversity-characteristic',
            'route_direction': 'route-direction'
        }

        self._is_exclusive = is_exclusive
        self._diversity_policy = diversity_policy
        self._route_objective_function = route_objective_function
        self._cost_characteristic = cost_characteristic
        self._latency_characteristic = latency_characteristic
        self._risk_diversity_characteristic = risk_diversity_characteristic
        self._route_direction = route_direction

    @classmethod
    def from_dict(cls, dikt) -> 'TapiPathComputationRoutingConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.path.computation.RoutingConstraint of this TapiPathComputationRoutingConstraint.  # noqa: E501
        :rtype: TapiPathComputationRoutingConstraint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_exclusive(self):
        """Gets the is_exclusive of this TapiPathComputationRoutingConstraint.

        To distinguish if the resources are to be exclusive to the service  # noqa: E501

        :return: The is_exclusive of this TapiPathComputationRoutingConstraint.
        :rtype: bool
        """
        return self._is_exclusive

    @is_exclusive.setter
    def is_exclusive(self, is_exclusive):
        """Sets the is_exclusive of this TapiPathComputationRoutingConstraint.

        To distinguish if the resources are to be exclusive to the service  # noqa: E501

        :param is_exclusive: The is_exclusive of this TapiPathComputationRoutingConstraint.
        :type is_exclusive: bool
        """

        self._is_exclusive = is_exclusive

    @property
    def diversity_policy(self):
        """Gets the diversity_policy of this TapiPathComputationRoutingConstraint.


        :return: The diversity_policy of this TapiPathComputationRoutingConstraint.
        :rtype: TapiPathComputationDiversityPolicy
        """
        return self._diversity_policy

    @diversity_policy.setter
    def diversity_policy(self, diversity_policy):
        """Sets the diversity_policy of this TapiPathComputationRoutingConstraint.


        :param diversity_policy: The diversity_policy of this TapiPathComputationRoutingConstraint.
        :type diversity_policy: TapiPathComputationDiversityPolicy
        """

        self._diversity_policy = diversity_policy

    @property
    def route_objective_function(self):
        """Gets the route_objective_function of this TapiPathComputationRoutingConstraint.


        :return: The route_objective_function of this TapiPathComputationRoutingConstraint.
        :rtype: TapiPathComputationRouteObjectiveFunction
        """
        return self._route_objective_function

    @route_objective_function.setter
    def route_objective_function(self, route_objective_function):
        """Sets the route_objective_function of this TapiPathComputationRoutingConstraint.


        :param route_objective_function: The route_objective_function of this TapiPathComputationRoutingConstraint.
        :type route_objective_function: TapiPathComputationRouteObjectiveFunction
        """

        self._route_objective_function = route_objective_function

    @property
    def cost_characteristic(self):
        """Gets the cost_characteristic of this TapiPathComputationRoutingConstraint.

        The list of costs where each cost relates to some aspect of the TopologicalEntity.  # noqa: E501

        :return: The cost_characteristic of this TapiPathComputationRoutingConstraint.
        :rtype: List[TapiTopologyCostCharacteristic]
        """
        return self._cost_characteristic

    @cost_characteristic.setter
    def cost_characteristic(self, cost_characteristic):
        """Sets the cost_characteristic of this TapiPathComputationRoutingConstraint.

        The list of costs where each cost relates to some aspect of the TopologicalEntity.  # noqa: E501

        :param cost_characteristic: The cost_characteristic of this TapiPathComputationRoutingConstraint.
        :type cost_characteristic: List[TapiTopologyCostCharacteristic]
        """

        self._cost_characteristic = cost_characteristic

    @property
    def latency_characteristic(self):
        """Gets the latency_characteristic of this TapiPathComputationRoutingConstraint.

        The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.  # noqa: E501

        :return: The latency_characteristic of this TapiPathComputationRoutingConstraint.
        :rtype: List[TapiTopologyLatencyCharacteristic]
        """
        return self._latency_characteristic

    @latency_characteristic.setter
    def latency_characteristic(self, latency_characteristic):
        """Sets the latency_characteristic of this TapiPathComputationRoutingConstraint.

        The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.  # noqa: E501

        :param latency_characteristic: The latency_characteristic of this TapiPathComputationRoutingConstraint.
        :type latency_characteristic: List[TapiTopologyLatencyCharacteristic]
        """

        self._latency_characteristic = latency_characteristic

    @property
    def risk_diversity_characteristic(self):
        """Gets the risk_diversity_characteristic of this TapiPathComputationRoutingConstraint.

        none  # noqa: E501

        :return: The risk_diversity_characteristic of this TapiPathComputationRoutingConstraint.
        :rtype: List[TapiTopologyRiskCharacteristic]
        """
        return self._risk_diversity_characteristic

    @risk_diversity_characteristic.setter
    def risk_diversity_characteristic(self, risk_diversity_characteristic):
        """Sets the risk_diversity_characteristic of this TapiPathComputationRoutingConstraint.

        none  # noqa: E501

        :param risk_diversity_characteristic: The risk_diversity_characteristic of this TapiPathComputationRoutingConstraint.
        :type risk_diversity_characteristic: List[TapiTopologyRiskCharacteristic]
        """

        self._risk_diversity_characteristic = risk_diversity_characteristic

    @property
    def route_direction(self):
        """Gets the route_direction of this TapiPathComputationRoutingConstraint.


        :return: The route_direction of this TapiPathComputationRoutingConstraint.
        :rtype: TapiCommonForwardingDirection
        """
        return self._route_direction

    @route_direction.setter
    def route_direction(self, route_direction):
        """Sets the route_direction of this TapiPathComputationRoutingConstraint.


        :param route_direction: The route_direction of this TapiPathComputationRoutingConstraint.
        :type route_direction: TapiCommonForwardingDirection
        """

        self._route_direction = route_direction
