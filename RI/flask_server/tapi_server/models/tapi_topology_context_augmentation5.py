# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_topology_topology_context import TapiTopologyTopologyContext  # noqa: F401,E501
from tapi_server import util


class TapiTopologyContextAugmentation5(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topology_context=None):  # noqa: E501
        """TapiTopologyContextAugmentation5 - a model defined in OpenAPI

        :param topology_context: The topology_context of this TapiTopologyContextAugmentation5.  # noqa: E501
        :type topology_context: TapiTopologyTopologyContext
        """
        self.openapi_types = {
            'topology_context': TapiTopologyTopologyContext
        }

        self.attribute_map = {
            'topology_context': 'topology-context'
        }

        self._topology_context = topology_context

    @classmethod
    def from_dict(cls, dikt) -> 'TapiTopologyContextAugmentation5':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.topology.ContextAugmentation5 of this TapiTopologyContextAugmentation5.  # noqa: E501
        :rtype: TapiTopologyContextAugmentation5
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topology_context(self):
        """Gets the topology_context of this TapiTopologyContextAugmentation5.


        :return: The topology_context of this TapiTopologyContextAugmentation5.
        :rtype: TapiTopologyTopologyContext
        """
        return self._topology_context

    @topology_context.setter
    def topology_context(self, topology_context):
        """Sets the topology_context of this TapiTopologyContextAugmentation5.


        :param topology_context: The topology_context of this TapiTopologyContextAugmentation5.
        :type topology_context: TapiTopologyTopologyContext
        """

        self._topology_context = topology_context
