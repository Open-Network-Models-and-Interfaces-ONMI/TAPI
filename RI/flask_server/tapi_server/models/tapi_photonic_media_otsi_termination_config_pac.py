# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_photonic_media_application_identifier import TapiPhotonicMediaApplicationIdentifier  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_central_frequency import TapiPhotonicMediaCentralFrequency  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_laser_control_type import TapiPhotonicMediaLaserControlType  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_modulation_technique import TapiPhotonicMediaModulationTechnique  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_power_properties_pac import TapiPhotonicMediaPowerPropertiesPac  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_spectrum_band import TapiPhotonicMediaSpectrumBand  # noqa: F401,E501
from tapi_server import util


class TapiPhotonicMediaOtsiTerminationConfigPac(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_identifier=None, central_frequency=None, modulation=None, spectrum=None, laser_control=None, total_power_warn_threshold_lower=None, total_power_warn_threshold_upper=None, transmit_power=None):  # noqa: E501
        """TapiPhotonicMediaOtsiTerminationConfigPac - a model defined in OpenAPI

        :param application_identifier: The application_identifier of this TapiPhotonicMediaOtsiTerminationConfigPac.  # noqa: E501
        :type application_identifier: TapiPhotonicMediaApplicationIdentifier
        :param central_frequency: The central_frequency of this TapiPhotonicMediaOtsiTerminationConfigPac.  # noqa: E501
        :type central_frequency: TapiPhotonicMediaCentralFrequency
        :param modulation: The modulation of this TapiPhotonicMediaOtsiTerminationConfigPac.  # noqa: E501
        :type modulation: TapiPhotonicMediaModulationTechnique
        :param spectrum: The spectrum of this TapiPhotonicMediaOtsiTerminationConfigPac.  # noqa: E501
        :type spectrum: TapiPhotonicMediaSpectrumBand
        :param laser_control: The laser_control of this TapiPhotonicMediaOtsiTerminationConfigPac.  # noqa: E501
        :type laser_control: TapiPhotonicMediaLaserControlType
        :param total_power_warn_threshold_lower: The total_power_warn_threshold_lower of this TapiPhotonicMediaOtsiTerminationConfigPac.  # noqa: E501
        :type total_power_warn_threshold_lower: str
        :param total_power_warn_threshold_upper: The total_power_warn_threshold_upper of this TapiPhotonicMediaOtsiTerminationConfigPac.  # noqa: E501
        :type total_power_warn_threshold_upper: str
        :param transmit_power: The transmit_power of this TapiPhotonicMediaOtsiTerminationConfigPac.  # noqa: E501
        :type transmit_power: TapiPhotonicMediaPowerPropertiesPac
        """
        self.openapi_types = {
            'application_identifier': TapiPhotonicMediaApplicationIdentifier,
            'central_frequency': TapiPhotonicMediaCentralFrequency,
            'modulation': TapiPhotonicMediaModulationTechnique,
            'spectrum': TapiPhotonicMediaSpectrumBand,
            'laser_control': TapiPhotonicMediaLaserControlType,
            'total_power_warn_threshold_lower': str,
            'total_power_warn_threshold_upper': str,
            'transmit_power': TapiPhotonicMediaPowerPropertiesPac
        }

        self.attribute_map = {
            'application_identifier': 'application-identifier',
            'central_frequency': 'central-frequency',
            'modulation': 'modulation',
            'spectrum': 'spectrum',
            'laser_control': 'laser-control',
            'total_power_warn_threshold_lower': 'total-power-warn-threshold-lower',
            'total_power_warn_threshold_upper': 'total-power-warn-threshold-upper',
            'transmit_power': 'transmit-power'
        }

        self._application_identifier = application_identifier
        self._central_frequency = central_frequency
        self._modulation = modulation
        self._spectrum = spectrum
        self._laser_control = laser_control
        self._total_power_warn_threshold_lower = total_power_warn_threshold_lower
        self._total_power_warn_threshold_upper = total_power_warn_threshold_upper
        self._transmit_power = transmit_power

    @classmethod
    def from_dict(cls, dikt) -> 'TapiPhotonicMediaOtsiTerminationConfigPac':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.photonic.media.OtsiTerminationConfigPac of this TapiPhotonicMediaOtsiTerminationConfigPac.  # noqa: E501
        :rtype: TapiPhotonicMediaOtsiTerminationConfigPac
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_identifier(self):
        """Gets the application_identifier of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :return: The application_identifier of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :rtype: TapiPhotonicMediaApplicationIdentifier
        """
        return self._application_identifier

    @application_identifier.setter
    def application_identifier(self, application_identifier):
        """Sets the application_identifier of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :param application_identifier: The application_identifier of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :type application_identifier: TapiPhotonicMediaApplicationIdentifier
        """

        self._application_identifier = application_identifier

    @property
    def central_frequency(self):
        """Gets the central_frequency of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :return: The central_frequency of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :rtype: TapiPhotonicMediaCentralFrequency
        """
        return self._central_frequency

    @central_frequency.setter
    def central_frequency(self, central_frequency):
        """Sets the central_frequency of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :param central_frequency: The central_frequency of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :type central_frequency: TapiPhotonicMediaCentralFrequency
        """

        self._central_frequency = central_frequency

    @property
    def modulation(self):
        """Gets the modulation of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :return: The modulation of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :rtype: TapiPhotonicMediaModulationTechnique
        """
        return self._modulation

    @modulation.setter
    def modulation(self, modulation):
        """Sets the modulation of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :param modulation: The modulation of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :type modulation: TapiPhotonicMediaModulationTechnique
        """

        self._modulation = modulation

    @property
    def spectrum(self):
        """Gets the spectrum of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :return: The spectrum of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :rtype: TapiPhotonicMediaSpectrumBand
        """
        return self._spectrum

    @spectrum.setter
    def spectrum(self, spectrum):
        """Sets the spectrum of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :param spectrum: The spectrum of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :type spectrum: TapiPhotonicMediaSpectrumBand
        """

        self._spectrum = spectrum

    @property
    def laser_control(self):
        """Gets the laser_control of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :return: The laser_control of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :rtype: TapiPhotonicMediaLaserControlType
        """
        return self._laser_control

    @laser_control.setter
    def laser_control(self, laser_control):
        """Sets the laser_control of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :param laser_control: The laser_control of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :type laser_control: TapiPhotonicMediaLaserControlType
        """

        self._laser_control = laser_control

    @property
    def total_power_warn_threshold_lower(self):
        """Gets the total_power_warn_threshold_lower of this TapiPhotonicMediaOtsiTerminationConfigPac.

        Allows to configure the Lowerpower threshold which is expected to be different from Default, but within the Min and Max values specified as OTSi SIP capability.  # noqa: E501

        :return: The total_power_warn_threshold_lower of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :rtype: str
        """
        return self._total_power_warn_threshold_lower

    @total_power_warn_threshold_lower.setter
    def total_power_warn_threshold_lower(self, total_power_warn_threshold_lower):
        """Sets the total_power_warn_threshold_lower of this TapiPhotonicMediaOtsiTerminationConfigPac.

        Allows to configure the Lowerpower threshold which is expected to be different from Default, but within the Min and Max values specified as OTSi SIP capability.  # noqa: E501

        :param total_power_warn_threshold_lower: The total_power_warn_threshold_lower of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :type total_power_warn_threshold_lower: str
        """

        self._total_power_warn_threshold_lower = total_power_warn_threshold_lower

    @property
    def total_power_warn_threshold_upper(self):
        """Gets the total_power_warn_threshold_upper of this TapiPhotonicMediaOtsiTerminationConfigPac.

        Allows to configure the Upper power threshold which is expected to be different from Default, but within the Min and Max values specified as OTSi SIP capability.  # noqa: E501

        :return: The total_power_warn_threshold_upper of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :rtype: str
        """
        return self._total_power_warn_threshold_upper

    @total_power_warn_threshold_upper.setter
    def total_power_warn_threshold_upper(self, total_power_warn_threshold_upper):
        """Sets the total_power_warn_threshold_upper of this TapiPhotonicMediaOtsiTerminationConfigPac.

        Allows to configure the Upper power threshold which is expected to be different from Default, but within the Min and Max values specified as OTSi SIP capability.  # noqa: E501

        :param total_power_warn_threshold_upper: The total_power_warn_threshold_upper of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :type total_power_warn_threshold_upper: str
        """

        self._total_power_warn_threshold_upper = total_power_warn_threshold_upper

    @property
    def transmit_power(self):
        """Gets the transmit_power of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :return: The transmit_power of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :rtype: TapiPhotonicMediaPowerPropertiesPac
        """
        return self._transmit_power

    @transmit_power.setter
    def transmit_power(self, transmit_power):
        """Sets the transmit_power of this TapiPhotonicMediaOtsiTerminationConfigPac.


        :param transmit_power: The transmit_power of this TapiPhotonicMediaOtsiTerminationConfigPac.
        :type transmit_power: TapiPhotonicMediaPowerPropertiesPac
        """

        self._transmit_power = transmit_power
