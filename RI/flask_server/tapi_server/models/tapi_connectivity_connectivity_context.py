# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_connectivity_connection import TapiConnectivityConnection  # noqa: F401,E501
from tapi_server.models.tapi_connectivity_connectivity_service import TapiConnectivityConnectivityService  # noqa: F401,E501
from tapi_server import util


class TapiConnectivityConnectivityContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connectivity_service=None, connection=None):  # noqa: E501
        """TapiConnectivityConnectivityContext - a model defined in OpenAPI

        :param connectivity_service: The connectivity_service of this TapiConnectivityConnectivityContext.  # noqa: E501
        :type connectivity_service: List[TapiConnectivityConnectivityService]
        :param connection: The connection of this TapiConnectivityConnectivityContext.  # noqa: E501
        :type connection: List[TapiConnectivityConnection]
        """
        self.openapi_types = {
            'connectivity_service': List[TapiConnectivityConnectivityService],
            'connection': List[TapiConnectivityConnection]
        }

        self.attribute_map = {
            'connectivity_service': 'connectivity-service',
            'connection': 'connection'
        }

        self._connectivity_service = connectivity_service
        self._connection = connection

    @classmethod
    def from_dict(cls, dikt) -> 'TapiConnectivityConnectivityContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.connectivity.ConnectivityContext of this TapiConnectivityConnectivityContext.  # noqa: E501
        :rtype: TapiConnectivityConnectivityContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connectivity_service(self):
        """Gets the connectivity_service of this TapiConnectivityConnectivityContext.

        none  # noqa: E501

        :return: The connectivity_service of this TapiConnectivityConnectivityContext.
        :rtype: List[TapiConnectivityConnectivityService]
        """
        return self._connectivity_service

    @connectivity_service.setter
    def connectivity_service(self, connectivity_service):
        """Sets the connectivity_service of this TapiConnectivityConnectivityContext.

        none  # noqa: E501

        :param connectivity_service: The connectivity_service of this TapiConnectivityConnectivityContext.
        :type connectivity_service: List[TapiConnectivityConnectivityService]
        """

        self._connectivity_service = connectivity_service

    @property
    def connection(self):
        """Gets the connection of this TapiConnectivityConnectivityContext.

        none  # noqa: E501

        :return: The connection of this TapiConnectivityConnectivityContext.
        :rtype: List[TapiConnectivityConnection]
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this TapiConnectivityConnectivityContext.

        none  # noqa: E501

        :param connection: The connection of this TapiConnectivityConnectivityContext.
        :type connection: List[TapiConnectivityConnection]
        """

        self._connection = connection
