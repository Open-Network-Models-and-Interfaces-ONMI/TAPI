# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_common_local_class import TapiCommonLocalClass  # noqa: F401,E501
from tapi_server.models.tapi_common_name_and_value import TapiCommonNameAndValue  # noqa: F401,E501
from tapi_server.models.tapi_topology_forwarding_rule import TapiTopologyForwardingRule  # noqa: F401,E501
from tapi_server.models.tapi_topology_rule_type import TapiTopologyRuleType  # noqa: F401,E501
from tapi_server import util


class TapiTopologyRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, local_id=None, override_priority=None, forwarding_rule=None, rule_type=None):  # noqa: E501
        """TapiTopologyRule - a model defined in OpenAPI

        :param name: The name of this TapiTopologyRule.  # noqa: E501
        :type name: List[TapiCommonNameAndValue]
        :param local_id: The local_id of this TapiTopologyRule.  # noqa: E501
        :type local_id: str
        :param override_priority: The override_priority of this TapiTopologyRule.  # noqa: E501
        :type override_priority: int
        :param forwarding_rule: The forwarding_rule of this TapiTopologyRule.  # noqa: E501
        :type forwarding_rule: TapiTopologyForwardingRule
        :param rule_type: The rule_type of this TapiTopologyRule.  # noqa: E501
        :type rule_type: TapiTopologyRuleType
        """
        self.openapi_types = {
            'name': List[TapiCommonNameAndValue],
            'local_id': str,
            'override_priority': int,
            'forwarding_rule': TapiTopologyForwardingRule,
            'rule_type': TapiTopologyRuleType
        }

        self.attribute_map = {
            'name': 'name',
            'local_id': 'local-id',
            'override_priority': 'override-priority',
            'forwarding_rule': 'forwarding-rule',
            'rule_type': 'rule-type'
        }

        self._name = name
        self._local_id = local_id
        self._override_priority = override_priority
        self._forwarding_rule = forwarding_rule
        self._rule_type = rule_type

    @classmethod
    def from_dict(cls, dikt) -> 'TapiTopologyRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.topology.Rule of this TapiTopologyRule.  # noqa: E501
        :rtype: TapiTopologyRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TapiTopologyRule.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this TapiTopologyRule.
        :rtype: List[TapiCommonNameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TapiTopologyRule.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this TapiTopologyRule.
        :type name: List[TapiCommonNameAndValue]
        """

        self._name = name

    @property
    def local_id(self):
        """Gets the local_id of this TapiTopologyRule.

        none  # noqa: E501

        :return: The local_id of this TapiTopologyRule.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this TapiTopologyRule.

        none  # noqa: E501

        :param local_id: The local_id of this TapiTopologyRule.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def override_priority(self):
        """Gets the override_priority of this TapiTopologyRule.

        none  # noqa: E501

        :return: The override_priority of this TapiTopologyRule.
        :rtype: int
        """
        return self._override_priority

    @override_priority.setter
    def override_priority(self, override_priority):
        """Sets the override_priority of this TapiTopologyRule.

        none  # noqa: E501

        :param override_priority: The override_priority of this TapiTopologyRule.
        :type override_priority: int
        """

        self._override_priority = override_priority

    @property
    def forwarding_rule(self):
        """Gets the forwarding_rule of this TapiTopologyRule.


        :return: The forwarding_rule of this TapiTopologyRule.
        :rtype: TapiTopologyForwardingRule
        """
        return self._forwarding_rule

    @forwarding_rule.setter
    def forwarding_rule(self, forwarding_rule):
        """Sets the forwarding_rule of this TapiTopologyRule.


        :param forwarding_rule: The forwarding_rule of this TapiTopologyRule.
        :type forwarding_rule: TapiTopologyForwardingRule
        """

        self._forwarding_rule = forwarding_rule

    @property
    def rule_type(self):
        """Gets the rule_type of this TapiTopologyRule.


        :return: The rule_type of this TapiTopologyRule.
        :rtype: TapiTopologyRuleType
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this TapiTopologyRule.


        :param rule_type: The rule_type of this TapiTopologyRule.
        :type rule_type: TapiTopologyRuleType
        """

        self._rule_type = rule_type
