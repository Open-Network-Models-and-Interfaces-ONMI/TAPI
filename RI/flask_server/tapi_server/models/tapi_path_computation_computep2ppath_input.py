# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_path_computation_path_objective_function import TapiPathComputationPathObjectiveFunction  # noqa: F401,E501
from tapi_server.models.tapi_path_computation_path_service_end_point import TapiPathComputationPathServiceEndPoint  # noqa: F401,E501
from tapi_server.models.tapi_path_computation_routing_constraint import TapiPathComputationRoutingConstraint  # noqa: F401,E501
from tapi_server.models.tapi_path_computation_topology_constraint import TapiPathComputationTopologyConstraint  # noqa: F401,E501
from tapi_server import util


class TapiPathComputationComputep2ppathInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topology_constraint=None, routing_constraint=None, objective_function=None, sep=None):  # noqa: E501
        """TapiPathComputationComputep2ppathInput - a model defined in OpenAPI

        :param topology_constraint: The topology_constraint of this TapiPathComputationComputep2ppathInput.  # noqa: E501
        :type topology_constraint: TapiPathComputationTopologyConstraint
        :param routing_constraint: The routing_constraint of this TapiPathComputationComputep2ppathInput.  # noqa: E501
        :type routing_constraint: TapiPathComputationRoutingConstraint
        :param objective_function: The objective_function of this TapiPathComputationComputep2ppathInput.  # noqa: E501
        :type objective_function: TapiPathComputationPathObjectiveFunction
        :param sep: The sep of this TapiPathComputationComputep2ppathInput.  # noqa: E501
        :type sep: List[TapiPathComputationPathServiceEndPoint]
        """
        self.openapi_types = {
            'topology_constraint': TapiPathComputationTopologyConstraint,
            'routing_constraint': TapiPathComputationRoutingConstraint,
            'objective_function': TapiPathComputationPathObjectiveFunction,
            'sep': List[TapiPathComputationPathServiceEndPoint]
        }

        self.attribute_map = {
            'topology_constraint': 'topology-constraint',
            'routing_constraint': 'routing-constraint',
            'objective_function': 'objective-function',
            'sep': 'sep'
        }

        self._topology_constraint = topology_constraint
        self._routing_constraint = routing_constraint
        self._objective_function = objective_function
        self._sep = sep

    @classmethod
    def from_dict(cls, dikt) -> 'TapiPathComputationComputep2ppathInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.path.computation.computep2ppath.Input of this TapiPathComputationComputep2ppathInput.  # noqa: E501
        :rtype: TapiPathComputationComputep2ppathInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topology_constraint(self):
        """Gets the topology_constraint of this TapiPathComputationComputep2ppathInput.


        :return: The topology_constraint of this TapiPathComputationComputep2ppathInput.
        :rtype: TapiPathComputationTopologyConstraint
        """
        return self._topology_constraint

    @topology_constraint.setter
    def topology_constraint(self, topology_constraint):
        """Sets the topology_constraint of this TapiPathComputationComputep2ppathInput.


        :param topology_constraint: The topology_constraint of this TapiPathComputationComputep2ppathInput.
        :type topology_constraint: TapiPathComputationTopologyConstraint
        """

        self._topology_constraint = topology_constraint

    @property
    def routing_constraint(self):
        """Gets the routing_constraint of this TapiPathComputationComputep2ppathInput.


        :return: The routing_constraint of this TapiPathComputationComputep2ppathInput.
        :rtype: TapiPathComputationRoutingConstraint
        """
        return self._routing_constraint

    @routing_constraint.setter
    def routing_constraint(self, routing_constraint):
        """Sets the routing_constraint of this TapiPathComputationComputep2ppathInput.


        :param routing_constraint: The routing_constraint of this TapiPathComputationComputep2ppathInput.
        :type routing_constraint: TapiPathComputationRoutingConstraint
        """

        self._routing_constraint = routing_constraint

    @property
    def objective_function(self):
        """Gets the objective_function of this TapiPathComputationComputep2ppathInput.


        :return: The objective_function of this TapiPathComputationComputep2ppathInput.
        :rtype: TapiPathComputationPathObjectiveFunction
        """
        return self._objective_function

    @objective_function.setter
    def objective_function(self, objective_function):
        """Sets the objective_function of this TapiPathComputationComputep2ppathInput.


        :param objective_function: The objective_function of this TapiPathComputationComputep2ppathInput.
        :type objective_function: TapiPathComputationPathObjectiveFunction
        """

        self._objective_function = objective_function

    @property
    def sep(self):
        """Gets the sep of this TapiPathComputationComputep2ppathInput.

        none  # noqa: E501

        :return: The sep of this TapiPathComputationComputep2ppathInput.
        :rtype: List[TapiPathComputationPathServiceEndPoint]
        """
        return self._sep

    @sep.setter
    def sep(self, sep):
        """Sets the sep of this TapiPathComputationComputep2ppathInput.

        none  # noqa: E501

        :param sep: The sep of this TapiPathComputationComputep2ppathInput.
        :type sep: List[TapiPathComputationPathServiceEndPoint]
        """

        self._sep = sep
