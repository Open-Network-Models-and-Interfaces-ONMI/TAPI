# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server import util


class TapiNotificationNameAndValueChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value_name=None, old_value=None, new_value=None):  # noqa: E501
        """TapiNotificationNameAndValueChange - a model defined in OpenAPI

        :param value_name: The value_name of this TapiNotificationNameAndValueChange.  # noqa: E501
        :type value_name: str
        :param old_value: The old_value of this TapiNotificationNameAndValueChange.  # noqa: E501
        :type old_value: str
        :param new_value: The new_value of this TapiNotificationNameAndValueChange.  # noqa: E501
        :type new_value: str
        """
        self.openapi_types = {
            'value_name': str,
            'old_value': str,
            'new_value': str
        }

        self.attribute_map = {
            'value_name': 'value-name',
            'old_value': 'old-value',
            'new_value': 'new-value'
        }

        self._value_name = value_name
        self._old_value = old_value
        self._new_value = new_value

    @classmethod
    def from_dict(cls, dikt) -> 'TapiNotificationNameAndValueChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.notification.NameAndValueChange of this TapiNotificationNameAndValueChange.  # noqa: E501
        :rtype: TapiNotificationNameAndValueChange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value_name(self):
        """Gets the value_name of this TapiNotificationNameAndValueChange.

        The name of the value. The value need not have a name.  # noqa: E501

        :return: The value_name of this TapiNotificationNameAndValueChange.
        :rtype: str
        """
        return self._value_name

    @value_name.setter
    def value_name(self, value_name):
        """Sets the value_name of this TapiNotificationNameAndValueChange.

        The name of the value. The value need not have a name.  # noqa: E501

        :param value_name: The value_name of this TapiNotificationNameAndValueChange.
        :type value_name: str
        """

        self._value_name = value_name

    @property
    def old_value(self):
        """Gets the old_value of this TapiNotificationNameAndValueChange.

        The value  # noqa: E501

        :return: The old_value of this TapiNotificationNameAndValueChange.
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this TapiNotificationNameAndValueChange.

        The value  # noqa: E501

        :param old_value: The old_value of this TapiNotificationNameAndValueChange.
        :type old_value: str
        """

        self._old_value = old_value

    @property
    def new_value(self):
        """Gets the new_value of this TapiNotificationNameAndValueChange.

        The value  # noqa: E501

        :return: The new_value of this TapiNotificationNameAndValueChange.
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this TapiNotificationNameAndValueChange.

        The value  # noqa: E501

        :param new_value: The new_value of this TapiNotificationNameAndValueChange.
        :type new_value: str
        """

        self._new_value = new_value
