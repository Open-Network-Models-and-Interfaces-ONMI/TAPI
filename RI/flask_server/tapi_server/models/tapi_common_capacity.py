# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_common_bandwidth_profile import TapiCommonBandwidthProfile  # noqa: F401,E501
from tapi_server.models.tapi_common_capacity_value import TapiCommonCapacityValue  # noqa: F401,E501
from tapi_server import util


class TapiCommonCapacity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth_profile=None, total_size=None):  # noqa: E501
        """TapiCommonCapacity - a model defined in OpenAPI

        :param bandwidth_profile: The bandwidth_profile of this TapiCommonCapacity.  # noqa: E501
        :type bandwidth_profile: TapiCommonBandwidthProfile
        :param total_size: The total_size of this TapiCommonCapacity.  # noqa: E501
        :type total_size: TapiCommonCapacityValue
        """
        self.openapi_types = {
            'bandwidth_profile': TapiCommonBandwidthProfile,
            'total_size': TapiCommonCapacityValue
        }

        self.attribute_map = {
            'bandwidth_profile': 'bandwidth-profile',
            'total_size': 'total-size'
        }

        self._bandwidth_profile = bandwidth_profile
        self._total_size = total_size

    @classmethod
    def from_dict(cls, dikt) -> 'TapiCommonCapacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.common.Capacity of this TapiCommonCapacity.  # noqa: E501
        :rtype: TapiCommonCapacity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth_profile(self):
        """Gets the bandwidth_profile of this TapiCommonCapacity.


        :return: The bandwidth_profile of this TapiCommonCapacity.
        :rtype: TapiCommonBandwidthProfile
        """
        return self._bandwidth_profile

    @bandwidth_profile.setter
    def bandwidth_profile(self, bandwidth_profile):
        """Sets the bandwidth_profile of this TapiCommonCapacity.


        :param bandwidth_profile: The bandwidth_profile of this TapiCommonCapacity.
        :type bandwidth_profile: TapiCommonBandwidthProfile
        """

        self._bandwidth_profile = bandwidth_profile

    @property
    def total_size(self):
        """Gets the total_size of this TapiCommonCapacity.


        :return: The total_size of this TapiCommonCapacity.
        :rtype: TapiCommonCapacityValue
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this TapiCommonCapacity.


        :param total_size: The total_size of this TapiCommonCapacity.
        :type total_size: TapiCommonCapacityValue
        """

        self._total_size = total_size
