# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server import util


class TapiPhotonicMediaFecPropertiesPac(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uncorrectable_bytes=None, corrected_bits=None, pre_fec_ber=None, uncorrectable_bits=None, corrected_bytes=None, post_fec_ber=None):  # noqa: E501
        """TapiPhotonicMediaFecPropertiesPac - a model defined in OpenAPI

        :param uncorrectable_bytes: The uncorrectable_bytes of this TapiPhotonicMediaFecPropertiesPac.  # noqa: E501
        :type uncorrectable_bytes: int
        :param corrected_bits: The corrected_bits of this TapiPhotonicMediaFecPropertiesPac.  # noqa: E501
        :type corrected_bits: int
        :param pre_fec_ber: The pre_fec_ber of this TapiPhotonicMediaFecPropertiesPac.  # noqa: E501
        :type pre_fec_ber: int
        :param uncorrectable_bits: The uncorrectable_bits of this TapiPhotonicMediaFecPropertiesPac.  # noqa: E501
        :type uncorrectable_bits: int
        :param corrected_bytes: The corrected_bytes of this TapiPhotonicMediaFecPropertiesPac.  # noqa: E501
        :type corrected_bytes: int
        :param post_fec_ber: The post_fec_ber of this TapiPhotonicMediaFecPropertiesPac.  # noqa: E501
        :type post_fec_ber: int
        """
        self.openapi_types = {
            'uncorrectable_bytes': int,
            'corrected_bits': int,
            'pre_fec_ber': int,
            'uncorrectable_bits': int,
            'corrected_bytes': int,
            'post_fec_ber': int
        }

        self.attribute_map = {
            'uncorrectable_bytes': 'uncorrectable-bytes',
            'corrected_bits': 'corrected-bits',
            'pre_fec_ber': 'pre-fec-ber',
            'uncorrectable_bits': 'uncorrectable-bits',
            'corrected_bytes': 'corrected-bytes',
            'post_fec_ber': 'post-fec-ber'
        }

        self._uncorrectable_bytes = uncorrectable_bytes
        self._corrected_bits = corrected_bits
        self._pre_fec_ber = pre_fec_ber
        self._uncorrectable_bits = uncorrectable_bits
        self._corrected_bytes = corrected_bytes
        self._post_fec_ber = post_fec_ber

    @classmethod
    def from_dict(cls, dikt) -> 'TapiPhotonicMediaFecPropertiesPac':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.photonic.media.FecPropertiesPac of this TapiPhotonicMediaFecPropertiesPac.  # noqa: E501
        :rtype: TapiPhotonicMediaFecPropertiesPac
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uncorrectable_bytes(self):
        """Gets the uncorrectable_bytes of this TapiPhotonicMediaFecPropertiesPac.

        Bytes that could not be corrected by FEC  # noqa: E501

        :return: The uncorrectable_bytes of this TapiPhotonicMediaFecPropertiesPac.
        :rtype: int
        """
        return self._uncorrectable_bytes

    @uncorrectable_bytes.setter
    def uncorrectable_bytes(self, uncorrectable_bytes):
        """Sets the uncorrectable_bytes of this TapiPhotonicMediaFecPropertiesPac.

        Bytes that could not be corrected by FEC  # noqa: E501

        :param uncorrectable_bytes: The uncorrectable_bytes of this TapiPhotonicMediaFecPropertiesPac.
        :type uncorrectable_bytes: int
        """

        self._uncorrectable_bytes = uncorrectable_bytes

    @property
    def corrected_bits(self):
        """Gets the corrected_bits of this TapiPhotonicMediaFecPropertiesPac.

        Bits corrected between those that were received corrupted  # noqa: E501

        :return: The corrected_bits of this TapiPhotonicMediaFecPropertiesPac.
        :rtype: int
        """
        return self._corrected_bits

    @corrected_bits.setter
    def corrected_bits(self, corrected_bits):
        """Sets the corrected_bits of this TapiPhotonicMediaFecPropertiesPac.

        Bits corrected between those that were received corrupted  # noqa: E501

        :param corrected_bits: The corrected_bits of this TapiPhotonicMediaFecPropertiesPac.
        :type corrected_bits: int
        """

        self._corrected_bits = corrected_bits

    @property
    def pre_fec_ber(self):
        """Gets the pre_fec_ber of this TapiPhotonicMediaFecPropertiesPac.

        counter: bit error rate before correction by FEC  # noqa: E501

        :return: The pre_fec_ber of this TapiPhotonicMediaFecPropertiesPac.
        :rtype: int
        """
        return self._pre_fec_ber

    @pre_fec_ber.setter
    def pre_fec_ber(self, pre_fec_ber):
        """Sets the pre_fec_ber of this TapiPhotonicMediaFecPropertiesPac.

        counter: bit error rate before correction by FEC  # noqa: E501

        :param pre_fec_ber: The pre_fec_ber of this TapiPhotonicMediaFecPropertiesPac.
        :type pre_fec_ber: int
        """

        self._pre_fec_ber = pre_fec_ber

    @property
    def uncorrectable_bits(self):
        """Gets the uncorrectable_bits of this TapiPhotonicMediaFecPropertiesPac.

        Bits that could not be corrected by FEC  # noqa: E501

        :return: The uncorrectable_bits of this TapiPhotonicMediaFecPropertiesPac.
        :rtype: int
        """
        return self._uncorrectable_bits

    @uncorrectable_bits.setter
    def uncorrectable_bits(self, uncorrectable_bits):
        """Sets the uncorrectable_bits of this TapiPhotonicMediaFecPropertiesPac.

        Bits that could not be corrected by FEC  # noqa: E501

        :param uncorrectable_bits: The uncorrectable_bits of this TapiPhotonicMediaFecPropertiesPac.
        :type uncorrectable_bits: int
        """

        self._uncorrectable_bits = uncorrectable_bits

    @property
    def corrected_bytes(self):
        """Gets the corrected_bytes of this TapiPhotonicMediaFecPropertiesPac.

        Bytes corrected between those that were received corrupted  # noqa: E501

        :return: The corrected_bytes of this TapiPhotonicMediaFecPropertiesPac.
        :rtype: int
        """
        return self._corrected_bytes

    @corrected_bytes.setter
    def corrected_bytes(self, corrected_bytes):
        """Sets the corrected_bytes of this TapiPhotonicMediaFecPropertiesPac.

        Bytes corrected between those that were received corrupted  # noqa: E501

        :param corrected_bytes: The corrected_bytes of this TapiPhotonicMediaFecPropertiesPac.
        :type corrected_bytes: int
        """

        self._corrected_bytes = corrected_bytes

    @property
    def post_fec_ber(self):
        """Gets the post_fec_ber of this TapiPhotonicMediaFecPropertiesPac.

        counter: bit error rate after correction by FEC  # noqa: E501

        :return: The post_fec_ber of this TapiPhotonicMediaFecPropertiesPac.
        :rtype: int
        """
        return self._post_fec_ber

    @post_fec_ber.setter
    def post_fec_ber(self, post_fec_ber):
        """Sets the post_fec_ber of this TapiPhotonicMediaFecPropertiesPac.

        counter: bit error rate after correction by FEC  # noqa: E501

        :param post_fec_ber: The post_fec_ber of this TapiPhotonicMediaFecPropertiesPac.
        :type post_fec_ber: int
        """

        self._post_fec_ber = post_fec_ber
