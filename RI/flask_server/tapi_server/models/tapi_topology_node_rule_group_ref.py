# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_topology_node_ref import TapiTopologyNodeRef  # noqa: F401,E501
from tapi_server import util


class TapiTopologyNodeRuleGroupRef(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topology_uuid=None, node_uuid=None, node_rule_group_uuid=None):  # noqa: E501
        """TapiTopologyNodeRuleGroupRef - a model defined in OpenAPI

        :param topology_uuid: The topology_uuid of this TapiTopologyNodeRuleGroupRef.  # noqa: E501
        :type topology_uuid: str
        :param node_uuid: The node_uuid of this TapiTopologyNodeRuleGroupRef.  # noqa: E501
        :type node_uuid: str
        :param node_rule_group_uuid: The node_rule_group_uuid of this TapiTopologyNodeRuleGroupRef.  # noqa: E501
        :type node_rule_group_uuid: str
        """
        self.openapi_types = {
            'topology_uuid': str,
            'node_uuid': str,
            'node_rule_group_uuid': str
        }

        self.attribute_map = {
            'topology_uuid': 'topology-uuid',
            'node_uuid': 'node-uuid',
            'node_rule_group_uuid': 'node-rule-group-uuid'
        }

        self._topology_uuid = topology_uuid
        self._node_uuid = node_uuid
        self._node_rule_group_uuid = node_rule_group_uuid

    @classmethod
    def from_dict(cls, dikt) -> 'TapiTopologyNodeRuleGroupRef':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.topology.NodeRuleGroupRef of this TapiTopologyNodeRuleGroupRef.  # noqa: E501
        :rtype: TapiTopologyNodeRuleGroupRef
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topology_uuid(self):
        """Gets the topology_uuid of this TapiTopologyNodeRuleGroupRef.

        none  # noqa: E501

        :return: The topology_uuid of this TapiTopologyNodeRuleGroupRef.
        :rtype: str
        """
        return self._topology_uuid

    @topology_uuid.setter
    def topology_uuid(self, topology_uuid):
        """Sets the topology_uuid of this TapiTopologyNodeRuleGroupRef.

        none  # noqa: E501

        :param topology_uuid: The topology_uuid of this TapiTopologyNodeRuleGroupRef.
        :type topology_uuid: str
        """

        self._topology_uuid = topology_uuid

    @property
    def node_uuid(self):
        """Gets the node_uuid of this TapiTopologyNodeRuleGroupRef.

        none  # noqa: E501

        :return: The node_uuid of this TapiTopologyNodeRuleGroupRef.
        :rtype: str
        """
        return self._node_uuid

    @node_uuid.setter
    def node_uuid(self, node_uuid):
        """Sets the node_uuid of this TapiTopologyNodeRuleGroupRef.

        none  # noqa: E501

        :param node_uuid: The node_uuid of this TapiTopologyNodeRuleGroupRef.
        :type node_uuid: str
        """

        self._node_uuid = node_uuid

    @property
    def node_rule_group_uuid(self):
        """Gets the node_rule_group_uuid of this TapiTopologyNodeRuleGroupRef.

        none  # noqa: E501

        :return: The node_rule_group_uuid of this TapiTopologyNodeRuleGroupRef.
        :rtype: str
        """
        return self._node_rule_group_uuid

    @node_rule_group_uuid.setter
    def node_rule_group_uuid(self, node_rule_group_uuid):
        """Sets the node_rule_group_uuid of this TapiTopologyNodeRuleGroupRef.

        none  # noqa: E501

        :param node_rule_group_uuid: The node_rule_group_uuid of this TapiTopologyNodeRuleGroupRef.
        :type node_rule_group_uuid: str
        """

        self._node_rule_group_uuid = node_rule_group_uuid
