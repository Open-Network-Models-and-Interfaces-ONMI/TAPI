# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_odu_deg_thr import TapiOduDegThr  # noqa: F401,E501
from tapi_server.models.tapi_odu_tim_det_mo import TapiOduTimDetMo  # noqa: F401,E501
from tapi_server import util


class TapiOduOduMipPac(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tim_det_mode=None, ex_dapi=None, deg_m=None, acti=None, ex_sapi=None, deg_thr=None, tim_act_disabled=True):  # noqa: E501
        """TapiOduOduMipPac - a model defined in OpenAPI

        :param tim_det_mode: The tim_det_mode of this TapiOduOduMipPac.  # noqa: E501
        :type tim_det_mode: TapiOduTimDetMo
        :param ex_dapi: The ex_dapi of this TapiOduOduMipPac.  # noqa: E501
        :type ex_dapi: str
        :param deg_m: The deg_m of this TapiOduOduMipPac.  # noqa: E501
        :type deg_m: int
        :param acti: The acti of this TapiOduOduMipPac.  # noqa: E501
        :type acti: str
        :param ex_sapi: The ex_sapi of this TapiOduOduMipPac.  # noqa: E501
        :type ex_sapi: str
        :param deg_thr: The deg_thr of this TapiOduOduMipPac.  # noqa: E501
        :type deg_thr: TapiOduDegThr
        :param tim_act_disabled: The tim_act_disabled of this TapiOduOduMipPac.  # noqa: E501
        :type tim_act_disabled: bool
        """
        self.openapi_types = {
            'tim_det_mode': TapiOduTimDetMo,
            'ex_dapi': str,
            'deg_m': int,
            'acti': str,
            'ex_sapi': str,
            'deg_thr': TapiOduDegThr,
            'tim_act_disabled': bool
        }

        self.attribute_map = {
            'tim_det_mode': 'tim-det-mode',
            'ex_dapi': 'ex-dapi',
            'deg_m': 'deg-m',
            'acti': 'acti',
            'ex_sapi': 'ex-sapi',
            'deg_thr': 'deg-thr',
            'tim_act_disabled': 'tim-act-disabled'
        }

        self._tim_det_mode = tim_det_mode
        self._ex_dapi = ex_dapi
        self._deg_m = deg_m
        self._acti = acti
        self._ex_sapi = ex_sapi
        self._deg_thr = deg_thr
        self._tim_act_disabled = tim_act_disabled

    @classmethod
    def from_dict(cls, dikt) -> 'TapiOduOduMipPac':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.odu.OduMipPac of this TapiOduOduMipPac.  # noqa: E501
        :rtype: TapiOduOduMipPac
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tim_det_mode(self):
        """Gets the tim_det_mode of this TapiOduOduMipPac.


        :return: The tim_det_mode of this TapiOduOduMipPac.
        :rtype: TapiOduTimDetMo
        """
        return self._tim_det_mode

    @tim_det_mode.setter
    def tim_det_mode(self, tim_det_mode):
        """Sets the tim_det_mode of this TapiOduOduMipPac.


        :param tim_det_mode: The tim_det_mode of this TapiOduOduMipPac.
        :type tim_det_mode: TapiOduTimDetMo
        """

        self._tim_det_mode = tim_det_mode

    @property
    def ex_dapi(self):
        """Gets the ex_dapi of this TapiOduOduMipPac.

        The Expected Destination Access Point Identifier (ExDAPI), provisioned by the managing system, to be compared with the TTI accepted at the overhead position of the sink for the purpose of checking the integrity of connectivity.  # noqa: E501

        :return: The ex_dapi of this TapiOduOduMipPac.
        :rtype: str
        """
        return self._ex_dapi

    @ex_dapi.setter
    def ex_dapi(self, ex_dapi):
        """Sets the ex_dapi of this TapiOduOduMipPac.

        The Expected Destination Access Point Identifier (ExDAPI), provisioned by the managing system, to be compared with the TTI accepted at the overhead position of the sink for the purpose of checking the integrity of connectivity.  # noqa: E501

        :param ex_dapi: The ex_dapi of this TapiOduOduMipPac.
        :type ex_dapi: str
        """

        self._ex_dapi = ex_dapi

    @property
    def deg_m(self):
        """Gets the deg_m of this TapiOduOduMipPac.

        This attribute indicates the threshold level for declaring a Degraded Signal defect (dDEG). A dDEG shall be declared if DegM consecutive bad PM Seconds are detected.  # noqa: E501

        :return: The deg_m of this TapiOduOduMipPac.
        :rtype: int
        """
        return self._deg_m

    @deg_m.setter
    def deg_m(self, deg_m):
        """Sets the deg_m of this TapiOduOduMipPac.

        This attribute indicates the threshold level for declaring a Degraded Signal defect (dDEG). A dDEG shall be declared if DegM consecutive bad PM Seconds are detected.  # noqa: E501

        :param deg_m: The deg_m of this TapiOduOduMipPac.
        :type deg_m: int
        """

        self._deg_m = deg_m

    @property
    def acti(self):
        """Gets the acti of this TapiOduOduMipPac.

        The Trail Trace Identifier (TTI) information recovered (Accepted) from the TTI overhead position at the sink of a trail.  # noqa: E501

        :return: The acti of this TapiOduOduMipPac.
        :rtype: str
        """
        return self._acti

    @acti.setter
    def acti(self, acti):
        """Sets the acti of this TapiOduOduMipPac.

        The Trail Trace Identifier (TTI) information recovered (Accepted) from the TTI overhead position at the sink of a trail.  # noqa: E501

        :param acti: The acti of this TapiOduOduMipPac.
        :type acti: str
        """

        self._acti = acti

    @property
    def ex_sapi(self):
        """Gets the ex_sapi of this TapiOduOduMipPac.

        The Expected Source Access Point Identifier (ExSAPI), provisioned by the managing system, to be compared with the TTI accepted at the overhead position of the sink for the purpose of checking the integrity of connectivity.                        # noqa: E501

        :return: The ex_sapi of this TapiOduOduMipPac.
        :rtype: str
        """
        return self._ex_sapi

    @ex_sapi.setter
    def ex_sapi(self, ex_sapi):
        """Sets the ex_sapi of this TapiOduOduMipPac.

        The Expected Source Access Point Identifier (ExSAPI), provisioned by the managing system, to be compared with the TTI accepted at the overhead position of the sink for the purpose of checking the integrity of connectivity.                        # noqa: E501

        :param ex_sapi: The ex_sapi of this TapiOduOduMipPac.
        :type ex_sapi: str
        """

        self._ex_sapi = ex_sapi

    @property
    def deg_thr(self):
        """Gets the deg_thr of this TapiOduOduMipPac.


        :return: The deg_thr of this TapiOduOduMipPac.
        :rtype: TapiOduDegThr
        """
        return self._deg_thr

    @deg_thr.setter
    def deg_thr(self, deg_thr):
        """Sets the deg_thr of this TapiOduOduMipPac.


        :param deg_thr: The deg_thr of this TapiOduOduMipPac.
        :type deg_thr: TapiOduDegThr
        """

        self._deg_thr = deg_thr

    @property
    def tim_act_disabled(self):
        """Gets the tim_act_disabled of this TapiOduOduMipPac.

        This attribute provides the control capability for the managing system to enable or disable the Consequent Action function when detecting Trace Identifier Mismatch (TIM) at the trail termination sink.  # noqa: E501

        :return: The tim_act_disabled of this TapiOduOduMipPac.
        :rtype: bool
        """
        return self._tim_act_disabled

    @tim_act_disabled.setter
    def tim_act_disabled(self, tim_act_disabled):
        """Sets the tim_act_disabled of this TapiOduOduMipPac.

        This attribute provides the control capability for the managing system to enable or disable the Consequent Action function when detecting Trace Identifier Mismatch (TIM) at the trail termination sink.  # noqa: E501

        :param tim_act_disabled: The tim_act_disabled of this TapiOduOduMipPac.
        :type tim_act_disabled: bool
        """

        self._tim_act_disabled = tim_act_disabled
