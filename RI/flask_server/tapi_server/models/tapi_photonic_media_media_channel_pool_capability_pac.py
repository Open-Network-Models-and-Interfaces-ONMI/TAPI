# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_photonic_media_spectrum_band import TapiPhotonicMediaSpectrumBand  # noqa: F401,E501
from tapi_server import util


class TapiPhotonicMediaMediaChannelPoolCapabilityPac(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_spectrum=None, supportable_spectrum=None, occupied_spectrum=None):  # noqa: E501
        """TapiPhotonicMediaMediaChannelPoolCapabilityPac - a model defined in OpenAPI

        :param available_spectrum: The available_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.  # noqa: E501
        :type available_spectrum: List[TapiPhotonicMediaSpectrumBand]
        :param supportable_spectrum: The supportable_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.  # noqa: E501
        :type supportable_spectrum: List[TapiPhotonicMediaSpectrumBand]
        :param occupied_spectrum: The occupied_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.  # noqa: E501
        :type occupied_spectrum: List[TapiPhotonicMediaSpectrumBand]
        """
        self.openapi_types = {
            'available_spectrum': List[TapiPhotonicMediaSpectrumBand],
            'supportable_spectrum': List[TapiPhotonicMediaSpectrumBand],
            'occupied_spectrum': List[TapiPhotonicMediaSpectrumBand]
        }

        self.attribute_map = {
            'available_spectrum': 'available-spectrum',
            'supportable_spectrum': 'supportable-spectrum',
            'occupied_spectrum': 'occupied-spectrum'
        }

        self._available_spectrum = available_spectrum
        self._supportable_spectrum = supportable_spectrum
        self._occupied_spectrum = occupied_spectrum

    @classmethod
    def from_dict(cls, dikt) -> 'TapiPhotonicMediaMediaChannelPoolCapabilityPac':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.photonic.media.MediaChannelPoolCapabilityPac of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.  # noqa: E501
        :rtype: TapiPhotonicMediaMediaChannelPoolCapabilityPac
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_spectrum(self):
        """Gets the available_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.

        none  # noqa: E501

        :return: The available_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.
        :rtype: List[TapiPhotonicMediaSpectrumBand]
        """
        return self._available_spectrum

    @available_spectrum.setter
    def available_spectrum(self, available_spectrum):
        """Sets the available_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.

        none  # noqa: E501

        :param available_spectrum: The available_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.
        :type available_spectrum: List[TapiPhotonicMediaSpectrumBand]
        """

        self._available_spectrum = available_spectrum

    @property
    def supportable_spectrum(self):
        """Gets the supportable_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.

        none  # noqa: E501

        :return: The supportable_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.
        :rtype: List[TapiPhotonicMediaSpectrumBand]
        """
        return self._supportable_spectrum

    @supportable_spectrum.setter
    def supportable_spectrum(self, supportable_spectrum):
        """Sets the supportable_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.

        none  # noqa: E501

        :param supportable_spectrum: The supportable_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.
        :type supportable_spectrum: List[TapiPhotonicMediaSpectrumBand]
        """

        self._supportable_spectrum = supportable_spectrum

    @property
    def occupied_spectrum(self):
        """Gets the occupied_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.

        none  # noqa: E501

        :return: The occupied_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.
        :rtype: List[TapiPhotonicMediaSpectrumBand]
        """
        return self._occupied_spectrum

    @occupied_spectrum.setter
    def occupied_spectrum(self, occupied_spectrum):
        """Sets the occupied_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.

        none  # noqa: E501

        :param occupied_spectrum: The occupied_spectrum of this TapiPhotonicMediaMediaChannelPoolCapabilityPac.
        :type occupied_spectrum: List[TapiPhotonicMediaSpectrumBand]
        """

        self._occupied_spectrum = occupied_spectrum
