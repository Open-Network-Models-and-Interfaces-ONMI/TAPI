# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_common_global_class import TapiCommonGlobalClass  # noqa: F401,E501
from tapi_server.models.tapi_common_name_and_value import TapiCommonNameAndValue  # noqa: F401,E501
from tapi_server.models.tapi_topology_topology_ref import TapiTopologyTopologyRef  # noqa: F401,E501
from tapi_server import util


class TapiTopologyNetworkTopologyService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, uuid=None, topology=None):  # noqa: E501
        """TapiTopologyNetworkTopologyService - a model defined in OpenAPI

        :param name: The name of this TapiTopologyNetworkTopologyService.  # noqa: E501
        :type name: List[TapiCommonNameAndValue]
        :param uuid: The uuid of this TapiTopologyNetworkTopologyService.  # noqa: E501
        :type uuid: str
        :param topology: The topology of this TapiTopologyNetworkTopologyService.  # noqa: E501
        :type topology: List[TapiTopologyTopologyRef]
        """
        self.openapi_types = {
            'name': List[TapiCommonNameAndValue],
            'uuid': str,
            'topology': List[TapiTopologyTopologyRef]
        }

        self.attribute_map = {
            'name': 'name',
            'uuid': 'uuid',
            'topology': 'topology'
        }

        self._name = name
        self._uuid = uuid
        self._topology = topology

    @classmethod
    def from_dict(cls, dikt) -> 'TapiTopologyNetworkTopologyService':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.topology.NetworkTopologyService of this TapiTopologyNetworkTopologyService.  # noqa: E501
        :rtype: TapiTopologyNetworkTopologyService
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TapiTopologyNetworkTopologyService.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this TapiTopologyNetworkTopologyService.
        :rtype: List[TapiCommonNameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TapiTopologyNetworkTopologyService.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this TapiTopologyNetworkTopologyService.
        :type name: List[TapiCommonNameAndValue]
        """

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this TapiTopologyNetworkTopologyService.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity.                      UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.                      Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}                       Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :return: The uuid of this TapiTopologyNetworkTopologyService.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this TapiTopologyNetworkTopologyService.

        UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity.                      UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.                      Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}                       Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6  # noqa: E501

        :param uuid: The uuid of this TapiTopologyNetworkTopologyService.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def topology(self):
        """Gets the topology of this TapiTopologyNetworkTopologyService.

        none  # noqa: E501

        :return: The topology of this TapiTopologyNetworkTopologyService.
        :rtype: List[TapiTopologyTopologyRef]
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """Sets the topology of this TapiTopologyNetworkTopologyService.

        none  # noqa: E501

        :param topology: The topology of this TapiTopologyNetworkTopologyService.
        :type topology: List[TapiTopologyTopologyRef]
        """

        self._topology = topology
