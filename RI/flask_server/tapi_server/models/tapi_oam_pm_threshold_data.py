# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_common_local_class import TapiCommonLocalClass  # noqa: F401,E501
from tapi_server.models.tapi_common_name_and_value import TapiCommonNameAndValue  # noqa: F401,E501
from tapi_server.models.tapi_common_time_period import TapiCommonTimePeriod  # noqa: F401,E501
from tapi_server import util


class TapiOamPmThresholdData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, local_id=None, is_transient=False, granularity_period=None):  # noqa: E501
        """TapiOamPmThresholdData - a model defined in OpenAPI

        :param name: The name of this TapiOamPmThresholdData.  # noqa: E501
        :type name: List[TapiCommonNameAndValue]
        :param local_id: The local_id of this TapiOamPmThresholdData.  # noqa: E501
        :type local_id: str
        :param is_transient: The is_transient of this TapiOamPmThresholdData.  # noqa: E501
        :type is_transient: bool
        :param granularity_period: The granularity_period of this TapiOamPmThresholdData.  # noqa: E501
        :type granularity_period: TapiCommonTimePeriod
        """
        self.openapi_types = {
            'name': List[TapiCommonNameAndValue],
            'local_id': str,
            'is_transient': bool,
            'granularity_period': TapiCommonTimePeriod
        }

        self.attribute_map = {
            'name': 'name',
            'local_id': 'local-id',
            'is_transient': 'is-transient',
            'granularity_period': 'granularity-period'
        }

        self._name = name
        self._local_id = local_id
        self._is_transient = is_transient
        self._granularity_period = granularity_period

    @classmethod
    def from_dict(cls, dikt) -> 'TapiOamPmThresholdData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.oam.PmThresholdData of this TapiOamPmThresholdData.  # noqa: E501
        :rtype: TapiOamPmThresholdData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TapiOamPmThresholdData.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :return: The name of this TapiOamPmThresholdData.
        :rtype: List[TapiCommonNameAndValue]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TapiOamPmThresholdData.

        List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.  # noqa: E501

        :param name: The name of this TapiOamPmThresholdData.
        :type name: List[TapiCommonNameAndValue]
        """

        self._name = name

    @property
    def local_id(self):
        """Gets the local_id of this TapiOamPmThresholdData.

        none  # noqa: E501

        :return: The local_id of this TapiOamPmThresholdData.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this TapiOamPmThresholdData.

        none  # noqa: E501

        :param local_id: The local_id of this TapiOamPmThresholdData.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def is_transient(self):
        """Gets the is_transient of this TapiOamPmThresholdData.

        none  # noqa: E501

        :return: The is_transient of this TapiOamPmThresholdData.
        :rtype: bool
        """
        return self._is_transient

    @is_transient.setter
    def is_transient(self, is_transient):
        """Sets the is_transient of this TapiOamPmThresholdData.

        none  # noqa: E501

        :param is_transient: The is_transient of this TapiOamPmThresholdData.
        :type is_transient: bool
        """

        self._is_transient = is_transient

    @property
    def granularity_period(self):
        """Gets the granularity_period of this TapiOamPmThresholdData.


        :return: The granularity_period of this TapiOamPmThresholdData.
        :rtype: TapiCommonTimePeriod
        """
        return self._granularity_period

    @granularity_period.setter
    def granularity_period(self, granularity_period):
        """Sets the granularity_period of this TapiOamPmThresholdData.


        :param granularity_period: The granularity_period of this TapiOamPmThresholdData.
        :type granularity_period: TapiCommonTimePeriod
        """

        self._granularity_period = granularity_period
