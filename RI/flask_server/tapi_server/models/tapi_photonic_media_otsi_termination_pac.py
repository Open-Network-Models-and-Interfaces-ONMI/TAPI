# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_photonic_media_application_identifier import TapiPhotonicMediaApplicationIdentifier  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_central_frequency import TapiPhotonicMediaCentralFrequency  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_laser_properties_pac import TapiPhotonicMediaLaserPropertiesPac  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_power_properties_pac import TapiPhotonicMediaPowerPropertiesPac  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_selected_modulation import TapiPhotonicMediaSelectedModulation  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_spectrum_band import TapiPhotonicMediaSpectrumBand  # noqa: F401,E501
from tapi_server import util


class TapiPhotonicMediaOtsiTerminationPac(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, selected_application_identifier=None, received_power=None, selected_central_frequency=None, transmited_power=None, selected_modulation=None, laser_properties=None, selected_spectrum=None):  # noqa: E501
        """TapiPhotonicMediaOtsiTerminationPac - a model defined in OpenAPI

        :param selected_application_identifier: The selected_application_identifier of this TapiPhotonicMediaOtsiTerminationPac.  # noqa: E501
        :type selected_application_identifier: TapiPhotonicMediaApplicationIdentifier
        :param received_power: The received_power of this TapiPhotonicMediaOtsiTerminationPac.  # noqa: E501
        :type received_power: TapiPhotonicMediaPowerPropertiesPac
        :param selected_central_frequency: The selected_central_frequency of this TapiPhotonicMediaOtsiTerminationPac.  # noqa: E501
        :type selected_central_frequency: TapiPhotonicMediaCentralFrequency
        :param transmited_power: The transmited_power of this TapiPhotonicMediaOtsiTerminationPac.  # noqa: E501
        :type transmited_power: TapiPhotonicMediaPowerPropertiesPac
        :param selected_modulation: The selected_modulation of this TapiPhotonicMediaOtsiTerminationPac.  # noqa: E501
        :type selected_modulation: TapiPhotonicMediaSelectedModulation
        :param laser_properties: The laser_properties of this TapiPhotonicMediaOtsiTerminationPac.  # noqa: E501
        :type laser_properties: TapiPhotonicMediaLaserPropertiesPac
        :param selected_spectrum: The selected_spectrum of this TapiPhotonicMediaOtsiTerminationPac.  # noqa: E501
        :type selected_spectrum: TapiPhotonicMediaSpectrumBand
        """
        self.openapi_types = {
            'selected_application_identifier': TapiPhotonicMediaApplicationIdentifier,
            'received_power': TapiPhotonicMediaPowerPropertiesPac,
            'selected_central_frequency': TapiPhotonicMediaCentralFrequency,
            'transmited_power': TapiPhotonicMediaPowerPropertiesPac,
            'selected_modulation': TapiPhotonicMediaSelectedModulation,
            'laser_properties': TapiPhotonicMediaLaserPropertiesPac,
            'selected_spectrum': TapiPhotonicMediaSpectrumBand
        }

        self.attribute_map = {
            'selected_application_identifier': 'selected-application-identifier',
            'received_power': 'received-power',
            'selected_central_frequency': 'selected-central-frequency',
            'transmited_power': 'transmited-power',
            'selected_modulation': 'selected-modulation',
            'laser_properties': 'laser-properties',
            'selected_spectrum': 'selected-spectrum'
        }

        self._selected_application_identifier = selected_application_identifier
        self._received_power = received_power
        self._selected_central_frequency = selected_central_frequency
        self._transmited_power = transmited_power
        self._selected_modulation = selected_modulation
        self._laser_properties = laser_properties
        self._selected_spectrum = selected_spectrum

    @classmethod
    def from_dict(cls, dikt) -> 'TapiPhotonicMediaOtsiTerminationPac':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.photonic.media.OtsiTerminationPac of this TapiPhotonicMediaOtsiTerminationPac.  # noqa: E501
        :rtype: TapiPhotonicMediaOtsiTerminationPac
        """
        return util.deserialize_model(dikt, cls)

    @property
    def selected_application_identifier(self):
        """Gets the selected_application_identifier of this TapiPhotonicMediaOtsiTerminationPac.


        :return: The selected_application_identifier of this TapiPhotonicMediaOtsiTerminationPac.
        :rtype: TapiPhotonicMediaApplicationIdentifier
        """
        return self._selected_application_identifier

    @selected_application_identifier.setter
    def selected_application_identifier(self, selected_application_identifier):
        """Sets the selected_application_identifier of this TapiPhotonicMediaOtsiTerminationPac.


        :param selected_application_identifier: The selected_application_identifier of this TapiPhotonicMediaOtsiTerminationPac.
        :type selected_application_identifier: TapiPhotonicMediaApplicationIdentifier
        """

        self._selected_application_identifier = selected_application_identifier

    @property
    def received_power(self):
        """Gets the received_power of this TapiPhotonicMediaOtsiTerminationPac.


        :return: The received_power of this TapiPhotonicMediaOtsiTerminationPac.
        :rtype: TapiPhotonicMediaPowerPropertiesPac
        """
        return self._received_power

    @received_power.setter
    def received_power(self, received_power):
        """Sets the received_power of this TapiPhotonicMediaOtsiTerminationPac.


        :param received_power: The received_power of this TapiPhotonicMediaOtsiTerminationPac.
        :type received_power: TapiPhotonicMediaPowerPropertiesPac
        """

        self._received_power = received_power

    @property
    def selected_central_frequency(self):
        """Gets the selected_central_frequency of this TapiPhotonicMediaOtsiTerminationPac.


        :return: The selected_central_frequency of this TapiPhotonicMediaOtsiTerminationPac.
        :rtype: TapiPhotonicMediaCentralFrequency
        """
        return self._selected_central_frequency

    @selected_central_frequency.setter
    def selected_central_frequency(self, selected_central_frequency):
        """Sets the selected_central_frequency of this TapiPhotonicMediaOtsiTerminationPac.


        :param selected_central_frequency: The selected_central_frequency of this TapiPhotonicMediaOtsiTerminationPac.
        :type selected_central_frequency: TapiPhotonicMediaCentralFrequency
        """

        self._selected_central_frequency = selected_central_frequency

    @property
    def transmited_power(self):
        """Gets the transmited_power of this TapiPhotonicMediaOtsiTerminationPac.


        :return: The transmited_power of this TapiPhotonicMediaOtsiTerminationPac.
        :rtype: TapiPhotonicMediaPowerPropertiesPac
        """
        return self._transmited_power

    @transmited_power.setter
    def transmited_power(self, transmited_power):
        """Sets the transmited_power of this TapiPhotonicMediaOtsiTerminationPac.


        :param transmited_power: The transmited_power of this TapiPhotonicMediaOtsiTerminationPac.
        :type transmited_power: TapiPhotonicMediaPowerPropertiesPac
        """

        self._transmited_power = transmited_power

    @property
    def selected_modulation(self):
        """Gets the selected_modulation of this TapiPhotonicMediaOtsiTerminationPac.


        :return: The selected_modulation of this TapiPhotonicMediaOtsiTerminationPac.
        :rtype: TapiPhotonicMediaSelectedModulation
        """
        return self._selected_modulation

    @selected_modulation.setter
    def selected_modulation(self, selected_modulation):
        """Sets the selected_modulation of this TapiPhotonicMediaOtsiTerminationPac.


        :param selected_modulation: The selected_modulation of this TapiPhotonicMediaOtsiTerminationPac.
        :type selected_modulation: TapiPhotonicMediaSelectedModulation
        """

        self._selected_modulation = selected_modulation

    @property
    def laser_properties(self):
        """Gets the laser_properties of this TapiPhotonicMediaOtsiTerminationPac.


        :return: The laser_properties of this TapiPhotonicMediaOtsiTerminationPac.
        :rtype: TapiPhotonicMediaLaserPropertiesPac
        """
        return self._laser_properties

    @laser_properties.setter
    def laser_properties(self, laser_properties):
        """Sets the laser_properties of this TapiPhotonicMediaOtsiTerminationPac.


        :param laser_properties: The laser_properties of this TapiPhotonicMediaOtsiTerminationPac.
        :type laser_properties: TapiPhotonicMediaLaserPropertiesPac
        """

        self._laser_properties = laser_properties

    @property
    def selected_spectrum(self):
        """Gets the selected_spectrum of this TapiPhotonicMediaOtsiTerminationPac.


        :return: The selected_spectrum of this TapiPhotonicMediaOtsiTerminationPac.
        :rtype: TapiPhotonicMediaSpectrumBand
        """
        return self._selected_spectrum

    @selected_spectrum.setter
    def selected_spectrum(self, selected_spectrum):
        """Sets the selected_spectrum of this TapiPhotonicMediaOtsiTerminationPac.


        :param selected_spectrum: The selected_spectrum of this TapiPhotonicMediaOtsiTerminationPac.
        :type selected_spectrum: TapiPhotonicMediaSpectrumBand
        """

        self._selected_spectrum = selected_spectrum
