# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_photonic_media_laser_control_status_type import TapiPhotonicMediaLaserControlStatusType  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_laser_type import TapiPhotonicMediaLaserType  # noqa: F401,E501
from tapi_server import util


class TapiPhotonicMediaLaserPropertiesPac(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, laser_application_type=None, laser_bias_current=None, laser_temperature=None, laser_status=None):  # noqa: E501
        """TapiPhotonicMediaLaserPropertiesPac - a model defined in OpenAPI

        :param laser_application_type: The laser_application_type of this TapiPhotonicMediaLaserPropertiesPac.  # noqa: E501
        :type laser_application_type: TapiPhotonicMediaLaserType
        :param laser_bias_current: The laser_bias_current of this TapiPhotonicMediaLaserPropertiesPac.  # noqa: E501
        :type laser_bias_current: str
        :param laser_temperature: The laser_temperature of this TapiPhotonicMediaLaserPropertiesPac.  # noqa: E501
        :type laser_temperature: str
        :param laser_status: The laser_status of this TapiPhotonicMediaLaserPropertiesPac.  # noqa: E501
        :type laser_status: TapiPhotonicMediaLaserControlStatusType
        """
        self.openapi_types = {
            'laser_application_type': TapiPhotonicMediaLaserType,
            'laser_bias_current': str,
            'laser_temperature': str,
            'laser_status': TapiPhotonicMediaLaserControlStatusType
        }

        self.attribute_map = {
            'laser_application_type': 'laser-application-type',
            'laser_bias_current': 'laser-bias-current',
            'laser_temperature': 'laser-temperature',
            'laser_status': 'laser-status'
        }

        self._laser_application_type = laser_application_type
        self._laser_bias_current = laser_bias_current
        self._laser_temperature = laser_temperature
        self._laser_status = laser_status

    @classmethod
    def from_dict(cls, dikt) -> 'TapiPhotonicMediaLaserPropertiesPac':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.photonic.media.LaserPropertiesPac of this TapiPhotonicMediaLaserPropertiesPac.  # noqa: E501
        :rtype: TapiPhotonicMediaLaserPropertiesPac
        """
        return util.deserialize_model(dikt, cls)

    @property
    def laser_application_type(self):
        """Gets the laser_application_type of this TapiPhotonicMediaLaserPropertiesPac.


        :return: The laser_application_type of this TapiPhotonicMediaLaserPropertiesPac.
        :rtype: TapiPhotonicMediaLaserType
        """
        return self._laser_application_type

    @laser_application_type.setter
    def laser_application_type(self, laser_application_type):
        """Sets the laser_application_type of this TapiPhotonicMediaLaserPropertiesPac.


        :param laser_application_type: The laser_application_type of this TapiPhotonicMediaLaserPropertiesPac.
        :type laser_application_type: TapiPhotonicMediaLaserType
        """

        self._laser_application_type = laser_application_type

    @property
    def laser_bias_current(self):
        """Gets the laser_bias_current of this TapiPhotonicMediaLaserPropertiesPac.

        The Bias current of the laser that is the medium polarization current of the laser.  # noqa: E501

        :return: The laser_bias_current of this TapiPhotonicMediaLaserPropertiesPac.
        :rtype: str
        """
        return self._laser_bias_current

    @laser_bias_current.setter
    def laser_bias_current(self, laser_bias_current):
        """Sets the laser_bias_current of this TapiPhotonicMediaLaserPropertiesPac.

        The Bias current of the laser that is the medium polarization current of the laser.  # noqa: E501

        :param laser_bias_current: The laser_bias_current of this TapiPhotonicMediaLaserPropertiesPac.
        :type laser_bias_current: str
        """

        self._laser_bias_current = laser_bias_current

    @property
    def laser_temperature(self):
        """Gets the laser_temperature of this TapiPhotonicMediaLaserPropertiesPac.

        The temperature of the laser  # noqa: E501

        :return: The laser_temperature of this TapiPhotonicMediaLaserPropertiesPac.
        :rtype: str
        """
        return self._laser_temperature

    @laser_temperature.setter
    def laser_temperature(self, laser_temperature):
        """Sets the laser_temperature of this TapiPhotonicMediaLaserPropertiesPac.

        The temperature of the laser  # noqa: E501

        :param laser_temperature: The laser_temperature of this TapiPhotonicMediaLaserPropertiesPac.
        :type laser_temperature: str
        """

        self._laser_temperature = laser_temperature

    @property
    def laser_status(self):
        """Gets the laser_status of this TapiPhotonicMediaLaserPropertiesPac.


        :return: The laser_status of this TapiPhotonicMediaLaserPropertiesPac.
        :rtype: TapiPhotonicMediaLaserControlStatusType
        """
        return self._laser_status

    @laser_status.setter
    def laser_status(self, laser_status):
        """Sets the laser_status of this TapiPhotonicMediaLaserPropertiesPac.


        :param laser_status: The laser_status of this TapiPhotonicMediaLaserPropertiesPac.
        :type laser_status: TapiPhotonicMediaLaserControlStatusType
        """

        self._laser_status = laser_status
