# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tapi_server.models.base_model_ import Model
from tapi_server.models.tapi_photonic_media_power_properties_pac import TapiPhotonicMediaPowerPropertiesPac  # noqa: F401,E501
from tapi_server.models.tapi_photonic_media_spectrum_band import TapiPhotonicMediaSpectrumBand  # noqa: F401,E501
from tapi_server import util


class TapiPhotonicMediaMediaChannelPropertiesPac(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, occupied_spectrum=None, measured_power_egress=None, measured_power_ingress=None):  # noqa: E501
        """TapiPhotonicMediaMediaChannelPropertiesPac - a model defined in OpenAPI

        :param occupied_spectrum: The occupied_spectrum of this TapiPhotonicMediaMediaChannelPropertiesPac.  # noqa: E501
        :type occupied_spectrum: TapiPhotonicMediaSpectrumBand
        :param measured_power_egress: The measured_power_egress of this TapiPhotonicMediaMediaChannelPropertiesPac.  # noqa: E501
        :type measured_power_egress: TapiPhotonicMediaPowerPropertiesPac
        :param measured_power_ingress: The measured_power_ingress of this TapiPhotonicMediaMediaChannelPropertiesPac.  # noqa: E501
        :type measured_power_ingress: TapiPhotonicMediaPowerPropertiesPac
        """
        self.openapi_types = {
            'occupied_spectrum': TapiPhotonicMediaSpectrumBand,
            'measured_power_egress': TapiPhotonicMediaPowerPropertiesPac,
            'measured_power_ingress': TapiPhotonicMediaPowerPropertiesPac
        }

        self.attribute_map = {
            'occupied_spectrum': 'occupied-spectrum',
            'measured_power_egress': 'measured-power-egress',
            'measured_power_ingress': 'measured-power-ingress'
        }

        self._occupied_spectrum = occupied_spectrum
        self._measured_power_egress = measured_power_egress
        self._measured_power_ingress = measured_power_ingress

    @classmethod
    def from_dict(cls, dikt) -> 'TapiPhotonicMediaMediaChannelPropertiesPac':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tapi.photonic.media.MediaChannelPropertiesPac of this TapiPhotonicMediaMediaChannelPropertiesPac.  # noqa: E501
        :rtype: TapiPhotonicMediaMediaChannelPropertiesPac
        """
        return util.deserialize_model(dikt, cls)

    @property
    def occupied_spectrum(self):
        """Gets the occupied_spectrum of this TapiPhotonicMediaMediaChannelPropertiesPac.


        :return: The occupied_spectrum of this TapiPhotonicMediaMediaChannelPropertiesPac.
        :rtype: TapiPhotonicMediaSpectrumBand
        """
        return self._occupied_spectrum

    @occupied_spectrum.setter
    def occupied_spectrum(self, occupied_spectrum):
        """Sets the occupied_spectrum of this TapiPhotonicMediaMediaChannelPropertiesPac.


        :param occupied_spectrum: The occupied_spectrum of this TapiPhotonicMediaMediaChannelPropertiesPac.
        :type occupied_spectrum: TapiPhotonicMediaSpectrumBand
        """

        self._occupied_spectrum = occupied_spectrum

    @property
    def measured_power_egress(self):
        """Gets the measured_power_egress of this TapiPhotonicMediaMediaChannelPropertiesPac.


        :return: The measured_power_egress of this TapiPhotonicMediaMediaChannelPropertiesPac.
        :rtype: TapiPhotonicMediaPowerPropertiesPac
        """
        return self._measured_power_egress

    @measured_power_egress.setter
    def measured_power_egress(self, measured_power_egress):
        """Sets the measured_power_egress of this TapiPhotonicMediaMediaChannelPropertiesPac.


        :param measured_power_egress: The measured_power_egress of this TapiPhotonicMediaMediaChannelPropertiesPac.
        :type measured_power_egress: TapiPhotonicMediaPowerPropertiesPac
        """

        self._measured_power_egress = measured_power_egress

    @property
    def measured_power_ingress(self):
        """Gets the measured_power_ingress of this TapiPhotonicMediaMediaChannelPropertiesPac.


        :return: The measured_power_ingress of this TapiPhotonicMediaMediaChannelPropertiesPac.
        :rtype: TapiPhotonicMediaPowerPropertiesPac
        """
        return self._measured_power_ingress

    @measured_power_ingress.setter
    def measured_power_ingress(self, measured_power_ingress):
        """Sets the measured_power_ingress of this TapiPhotonicMediaMediaChannelPropertiesPac.


        :param measured_power_ingress: The measured_power_ingress of this TapiPhotonicMediaMediaChannelPropertiesPac.
        :type measured_power_ingress: TapiPhotonicMediaPowerPropertiesPac
        """

        self._measured_power_ingress = measured_power_ingress
