module TapiInformationModel {


  namespace "urn:onf:tapi:im:yang";
  prefix Tapi;
  
  //import ietf-inet-types { prefix inet; }

  import TapiDataTypes { prefix TapiDt; }

  organization "ONF T-API Group";

  contact "mailto:info@opennetworking.org";

  description
    "This module contains a collection of YANG definitions for
     Information Model. It is part of the T-API
     specification.
     Authors List:
     Ricard Vilalta (CTTC)
     Victor López (Telefónica)
     (T-API Team)";
   
  revision 2015-09-11 {
    description
      "First draft for Transport API Connectivity Service";
  }
 
  /*****************************************************************
  * Groupings
  *****************************************************************/

  // Conditional Pacs associated to TopologicalEntity

  grouping State_Pac {

    leaf operationalState {
      type TapiDt:LifecycleState;
    }
    leaf administrativeState {
      type TapiDt:AdministrativeState;
    }
    leaf lifecycleState {
      type TapiDt:LifecycleState;
    }
    
  }

  grouping RiskParameter_Pac {
    
    list riskCharacteristicList {
       key "riskCharacteristicName";
       uses TapiDt:RiskCharacteristic;
    }
  }

  grouping TransferCost_Pac {
    list costCharacteristicList {
      key "costName";
      uses TapiDt:CostCharacteristics;
      min-elements "1";

      }
  }

  grouping TransferTiming_Pac {
    
    leaf fixedLatencyCharacteristic {
      type string;
      mandatory true;
    }
    leaf jitterCharacteristic {
      type string;
    }
    leaf wanderCharacteristic {
      type string;
    }
    list queuingLatencyList {
      key "trafficProperty";
      uses TapiDt:QueuingLatency;
    }
  }

  grouping TransferIntegrity_Pac {
    
    leaf errorCharacteristic {
      type string;
    }
    leaf lossCharacteristic {
      type string;
    }
    leaf repeatDeliveryCharacteristic {
      type string;
    }
    leaf deliveryOrderCharacteristic {
      type string;
    }
    leaf unavailableTimeCharacteristic {
      type string;
      mandatory true;
    }
    leaf serverIntegrityProcessCharacteristic {
      type string;
    }
  }

  grouping TransferCapacity_Pac {
    
    container totalPotentialCapacity {
      uses TapiDt:Capacity;
    }
    container availableCapacity {
      uses TapiDt:Capacity;
    }
    list capacityAssignedToUserView {
      key "totalSize";
      uses TapiDt:Capacity;
    }
    leaf capacityInteractionAlgorithm {
      type string;
    }
  }

  grouping Validation_Pac {

    list validationMechanismList {
      key "validationMechanism";
      uses TapiDt:ValidationMechanism;
      min-elements "1";
    }
  }

  grouping LayerProtocolTransition_Pac {

    
    list transitionedLayerProtocolList {
      key "transitionedLayerProtocol";
      leaf transitionedLayerProtocol{
        type TapiDt:LayerProtocolName;
      }
    }

    leaf-list _ltpRefList {
      type leafref {
        path "/Context/topologyList/node/edgeLtpList/uuid"; // Not clear path
      }
    }
  }    
  
  grouping NodeEdgePoint {
    description
    "The LogicalTerminationPoint (LTP) object class encapsulates the 
    termination and adaptation functions of one or more transport layers. 
    The structure of LTP supports all transport protocols including circuit and packet forms.";

    leaf uuid{
    	type TapiDt:UniversalId;
    }
    
    
    list _IpList{ // Unconsistant
      key "layerProtocol";
      uses TapiDt:LayerProtocol;
    }
    
    leaf operationalState {
      type TapiDt:OperationalState;
    }
	
	  leaf physicalPortReference {
	    type string;
	  }
	  
  }
  
  grouping LinkEnd {
    description
    "The association of the Link to LTPs is made via LinkEnd.
    The LinkEnd object class models the access to the Link function. 
    The traffic forwarding between the associated LinkEnds of the Link depends upon the type of Link.  
    In cases where there is resilience the LinkEnd may convey the resilience role of the access to the Link. 
    The Link can be considered as a component and the LinkEnd as a Port on that component";
    
    
    leaf uuid{
    	type TapiDt:UniversalId;
    }
    
    leaf-list _nodeEpRefList {
      type leafref {
        path "/Tapi:Context/Tapi:topologyList/Tapi:node/Tapi:edgeLtpList/Tapi:uuid";
      }
      max-elements "1";
      min-elements "1";      
    }
    
    leaf role {
      type TapiDt:EndRole;
    }
    
    leaf direction {
      type TapiDt:EndDirection;
    }
    
    list localIdList {
      key "valueName";
      uses TapiDt:NameAndValue;
      min-elements "1";
    }
    
  }
    
  grouping Node {
    description
      "The ForwardingDomain (FD) object class models the ForwardingDomain topological component which is used to effect forwarding of transport characteristic information and offers the potential to enable forwarding. 
      At the lowest level of recursion, an FD (within a network element (NE)) represents a switch matrix (i.e., a fabric). Note that an NE can encompass multiple switch matrices (FDs). ";
    

    leaf uuid{
    	type TapiDt:UniversalId; // Missing in Tapi UML
    }

    leaf-list _encapTopologyRef {
      type leafref {
        path "/Tapi:Context/Tapi:topologyList/Tapi:uuid";
      }
      max-elements "1";
    }

    list edgeLtpList { // Differs from UML - If it is not in this proposed herarchy NodeEdgePoint needs a _nodeRef
      key "uuid";
      uses NodeEdgePoint;     
    }
    
    list nameList {
      key "valueName";
      uses TapiDt:NameAndValue;
      min-elements "1";
    }
    
    list labelList {
      key "valueName";
      uses TapiDt:NameAndValue;
    }
    
    list extensionList {
      key "valueName";
      uses TapiDt:NameAndValue;
    }    
    
    list layerProtocolNameList {
      key "layerProtocolName";
      leaf layerProtocolName {
        type TapiDt:LayerProtocolName;
      }
      min-elements "1";
    }
    
    container _state_Pac {
      presence "<condition for State_Pac attributes>";
      uses State_Pac;
    }
    
    container _riskParameter_Pac {
      presence "<condition for RiskParameter_Pac attributes>";
      uses RiskParameter_Pac;
    }
    
    container _transferCost_Pac {
      presence "<condition for TransferCost_Pac attributes>";
      uses TransferCost_Pac;
    }
    
    container _transferTiming_Pac {
      presence "<condition for TransferTiming_Pac attributes>";
      uses TransferTiming_Pac;
    }
    
    container _transferCapacity_Pac {
      presence "<condition for TransferCapacity_Pac attributes>";
      uses TransferCapacity_Pac;
    }
    
    container _transferIntegrity_Pac {
      presence "<condition for TransferIntegrity_Pac attributes>";
      uses TransferIntegrity_Pac;
    }
    
    container _validation_Pac {
      presence "<condition for Validation_Pac attributes>";    
      uses Validation_Pac;
    }
    
    container _layerTransition_Pac {
      presence "<condition for LayerProtocolTransition_Pac attributes>";
      uses LayerProtocolTransition_Pac;
    }
    
  }

  grouping Link {
    description
    "The Link object class models effective adjacency between two or more ForwardingDomains (FD).";
    
    leaf uuid{
    	type TapiDt:UniversalId;
    }

    list linkEndList {
      key "uuid";
      uses LinkEnd;
    }
  
    leaf-list _nodeRefList{
      type leafref {
        path "/Tapi:Context/Tapi:topologyList/Tapi:node/Tapi:uuid";
      }
    }
  
  
   list nameList {
      key "valueName";
      uses TapiDt:NameAndValue;
      min-elements "1";
    }
    
    list labelList {
      key "valueName";
      uses TapiDt:NameAndValue;
    }
    
    list extensionList {
      key "valueName";
      uses TapiDt:NameAndValue;
    }    
    
    list layerProtocolNameList {
      key "layerProtocolName";
      leaf layerProtocolName {
        type TapiDt:LayerProtocolName;
      }
      min-elements "1";
    }
    
    leaf linkDirection {
      type TapiDt:ForwardingDirection;
    }
    
    container _state_Pac {
      presence "<condition for State_Pac attributes>";
      uses State_Pac;
    }
    
    container _riskParameter_Pac {
      presence "<condition for RiskParameter_Pac attributes>";
      uses RiskParameter_Pac;
    }
    
    container _transferCost_Pac {
      presence "<condition for TransferCost_Pac attributes>";
      uses TransferCost_Pac;
    }
    
    container _transferTiming_Pac {
      presence "<condition for TransferTiming_Pac attributes>";
      uses TransferTiming_Pac;
    }
    
    container _transferCapacity_Pac {
      presence "<condition for TransferCapacity_Pac attributes>";
      uses TransferCapacity_Pac;
    }
    
    container _transferIntegrity_Pac {
      presence "<condition for TransferIntegrity_Pac attributes>";
      uses TransferIntegrity_Pac;
    }
    
    container _validation_Pac {
      presence "<condition for Validation_Pac attributes>";    
      uses Validation_Pac;
    }
    
    container _layerTransition_Pac {
      presence "<condition for LayerProtocolTransition_Pac attributes>";
      uses LayerProtocolTransition_Pac;
    }
    
  }
  
  grouping Topology {
  
    leaf uuid{
    	type TapiDt:UniversalId;
    }
    
    list node {
      key "uuid";
      uses Node;
    }
    
    list link {
      key "uuid";
      uses Link;
    }
    
    list nameList {
      key "valueName";
      uses TapiDt:NameAndValue;
      min-elements "1";
    }
    
    list labelList {
      key "valueName";
      uses TapiDt:NameAndValue;
    }
    
    list extensionList {
      key "valueName";
      uses TapiDt:NameAndValue;
    }    
    
    list layerProtocolNameList {
      key "layerProtocolName";
      leaf layerProtocolName {
        type TapiDt:LayerProtocolName;
      }
    }
  }
  
  grouping ServiceEndPoint {
    description
    "The LogicalTerminationPoint (LTP) object class encapsulates the 
    termination and adaptation functions of one or more transport layers. 
    The structure of LTP supports all transport protocols including circuit and packet forms.";
  
    leaf uuid{
    	type TapiDt:UniversalId;
    }
    
    list _IpList{
      key "layerProtocol";
      uses TapiDt:LayerProtocol;
      min-elements "1";
    }

    leaf operationalState {
      type TapiDt:OperationalState;
    }
    
    leaf-list _mappedNodeEpList {
      type leafref {
        path "/Tapi:Context/Tapi:topologyList/Tapi:node/Tapi:edgeLtpList/Tapi:uuid";
      }
    }
    
  }
  
  grouping ConnectionEndPoint {
    description
    "The LogicalTerminationPoint (LTP) object class encapsulates the termination and adaptation functions of one or more transport layers. 
    The structure of LTP supports all transport protocols including circuit and packet forms.";
  
    leaf uuid{
    	type TapiDt:UniversalId;
    }

    list _IpList{
      key "layerProtocol";
      uses TapiDt:LayerProtocol;
      min-elements "1";
    }
    
    leaf operationalState {
      type TapiDt:OperationalState;
    }
    
    leaf-list _clientNodeEpList {
      type leafref {
        path "/Tapi:Context/Tapi:topologyList/Tapi:node/Tapi:edgeLtpList/Tapi:uuid";
      }
    }
    
    leaf-list _serverNodeEpList {
      type leafref {
        path "/Tapi:Context/Tapi:topologyList/Tapi:node/Tapi:edgeLtpList/Tapi:uuid";
      }
    }    
    
  }

  grouping ConnectionEnd {
    description
    "The association of the FC to LTPs is made via EndPoints.
    The EndPoint (EP) object class models the access to the FC function. 
    The traffic forwarding between the associated EPs of the FC depends upon the type of FC and may be associated 
    with  FcSwitch object instances.  
    In cases where there is resilience the EndPoint may convey the resilience role of the access to the FC. 
    It can represent a protected (resilient/reliable) point or a protecting (unreliable working or protection) point.
    The EP replaces the Protection Unit of a traditional protection model. 
    The ForwadingConstruct can be considered as a component and the EndPoint as a Port on that component";

    leaf uuid{
    	type TapiDt:UniversalId; // Differs
    }
    
    container connEpRef { // Differs
      uses ConnectionEndPoint;
    }

    leaf role {
      type TapiDt:EndRole;
    }
    
    leaf direction {
      type TapiDt:EndDirection;
    }
    
  }

  grouping ServiceEnd {
  
    leaf uuid{
    	type TapiDt:UniversalId; // Differs
    }
  
    container serviceEpRef { // Differs
      uses ConnectionEndPoint;
    }    

    leaf role {
      type TapiDt:EndRole;
    }
    
    leaf direction {
      type TapiDt:EndDirection;
    }
  
  }

  grouping Path {
    description
    "The FC Route (FcRoute) object class models the individual routes of an FC. 
    The route of an FC object is represented by a list of FCs at a lower level. 
    Note that depending on the service supported by an FC, an the FC can have multiple routes.";

    leaf uuid{
    	type TapiDt:UniversalId; // Differs
    }

    leaf-list _LowerLevelFcList{
      type leafref {
        path "/Tapi:Connection/Tapi:uuid";
      }
      min-elements "1";
    }
  }
  
  grouping Connection {

    leaf uuid{
    	type TapiDt:UniversalId; // Differs
    }

    list connEndList { // Differs from UML
      key "uuid";
      uses ConnectionEnd;
      max-elements "2";
    }

    list pathList { // Differs from UML
      key "uuid";
      uses Path;
    }

    leaf-list _nodeRefList { // Differs from UML (only name)
      type leafref {
        path "/Tapi:Context/Tapi:topologyList/Tapi:node/Tapi:uuid";
      }
    }
    
    leaf layerProtocolName {
      type TapiDt:LayerProtocolName;
    } 
    
  }
  
  grouping Service {

    leaf uuid{
    	type TapiDt:UniversalId; // Differs
    }

    leaf-list _connectionRefList {
      type leafref {
        path "/Tapi:Connection/Tapi:uuid";
      }
    }
  
    list serviceEndList { //Differs from UML
      key "uuid";
      uses ServiceEnd;
      max-elements "2";
    }
    
    leaf layerProtocolName {
      type TapiDt:LayerProtocolName;
    }
    
  }
  
  grouping Context {
  
    leaf uuid{
    	type TapiDt:UniversalId; // Differs
    }  
    
    list topologyList { // Differs from UML
      key "uuid";
      uses Topology;
      max-elements "1";
    }
    
  }
  
  /*****************************************************************
  * Main containers
  *****************************************************************/
  
    list Connection {
    description
    "The ForwardingConstruct (FC) object class models enabled potential for forwarding between two or more LTPs and like the LTP supports any transport protocol including all circuit and packet forms. 
    At the lowest level of recursion, a FC represents a cross-connection within an NE.";
  
    key "uuid";
    uses Connection;
  } 
 
  list Service {
    description
    "The ForwardingConstruct (FC) object class models enabled potential for forwarding between two or more LTPs and like the LTP supports any       
    transport protocol including all circuit and packet forms. 
    At the lowest level of recursion, a FC represents a cross-connection within an NE.";
    
    key "uuid";
    uses Service;
  }
  
  list Context {
    description
    "The Network Control Domain (NCD) object class represents the scope of control that a particular SDN controller 
    has with respect to a particular network, (i.e., encompassing a designated set of interconnected (virtual) 
    network elements).";
    
    key "uuid";
    uses Context;
    
  }
   
}
